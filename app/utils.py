import hashlib
from typing import Callable

from aiogram import Router
from aiogram.types import InlineKeyboardMarkup, Message

import app.keyboards as kb
from app.models import Persons, async_session

router = Router()


def hash_password(password: str) -> str:
    """–•—ç—à–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SHA-256."""
    return hashlib.sha256(password.encode('utf-8')).hexdigest()


def valid_fio(fio: str) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –§–ò–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ)."""
    if not isinstance(fio, str):
        raise TypeError('–§–ò–û –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π')
    parts = fio.split()
    if len(parts) != 3:
        raise TypeError('–§–ò–û –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞')
    russian_letters = '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è-_()'
    for part in parts:
        if len(part) < 2:
            raise TypeError('–ö–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –§–ò–û –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 1 —Å–∏–º–≤–æ–ª–∞')
        if any(c.lower() not in russian_letters for c in part):
            raise TypeError('–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã')


async def get_person_info(person_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–ª–æ–≤–µ–∫–µ –ø–æ –µ–≥–æ ID.

    –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω—É–∂–Ω–∞ —á—Ç–æ–±—ã –≤–æ–∑–≤—Ä–∞—â–∞–ª–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–ª–æ–≤–µ–∫–µ,
    –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ keyboards.
    """
    async with async_session() as session:
        person = await session.get(Persons, person_id)
        if person:
            full_info = (
                f"üÜî ID: {person.person_id}\n"
                f"üë§ {person.last_name} {person.first_name} {person.father_name}\n\n"
                f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {person.birth_date}\n"
                f"üìÖ –î–∞—Ç–∞ —Å–º–µ—Ä—Ç–∏: {person.death_date if person.death_date else '–ù/–î'}\n"
                f"üë´ –ü–æ–ª: {person.gender}\n\n"
                f"üìã –ë–∏–æ–≥—Ä–∞—Ñ–∏—è:\n{person.bio if person.bio else '–ë–∏–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
                f"üñº –§–æ—Ç–æ: {person.photo_url}\n"
            )
            return full_info
        else:
            return "–ü–µ—Ä—Å–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"


async def send_person_info(message: Message, person_id: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–ª–æ–≤–µ–∫–µ –≤ –≤–∏–¥–µ —Å–æ–æ–±—â–µ–Ω–∏—è.

    –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —á–µ–ª–æ–≤–µ–∫–µ –ø–æ ID, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
    —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    full_info = await get_person_info(person_id)
    keyboard = kb.get_edit_keyboard(person_id)
    await message.answer(full_info, reply_markup=keyboard)


KeyboardFunc = Callable[[int], InlineKeyboardMarkup]

async def edit_text_person_info(message: Message, person_id: int, keyboard_func: KeyboardFunc) -> None:
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —á–µ–ª–æ–≤–µ–∫–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.

    –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —á–µ–ª–æ–≤–µ–∫–µ –ø–æ ID, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
    —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É
    –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏ get_edit_keyboard –∏ get_edit_fields_keyboard –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–ª–æ–≤–µ–∫–µ.
    """
    full_info = await get_person_info(person_id)
    await message.edit_text(full_info, reply_markup=keyboard_func(person_id))


@router.message()
async def flood(message: Message) -> None:
    """–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è.

    –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –∏–º–µ—é—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞,
    —Ç–æ –æ–Ω–∏ –ø–æ–ª—É—á–∞—Ç—å —Ç–µ–∫—Å—Ç –æ–± —ç—Ç–æ–º.
    """
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å")