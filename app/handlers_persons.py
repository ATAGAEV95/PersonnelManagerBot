from aiogram import F, Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime

from app.models import Persons, async_session
from app.utils import valid_fio

router = Router()

class InsertForm(StatesGroup):
    fio = State()
    gender = State()
    birth_date = State()
    death_date = State()
    bio = State()


@router.message(F.text == '–í—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
async def insert_data(message: Message, state: FSMContext):
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –§–ò–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ) –Ω–æ–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞")
    await state.set_state(InsertForm.fio)


@router.message(InsertForm.fio)
async def process_fio(message: Message, state: FSMContext):
    try:
        valid_fio(message.text)
        await state.update_data(fio=message.text)
        await message.answer("üë´ –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª –Ω–æ–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞: '–ú—É–∂—Å–∫–æ–π' –∏–ª–∏ '–ñ–µ–Ω—Å–∫–∏–π'")
        await state.set_state(InsertForm.gender)
    except TypeError as e:
        await message.answer(str(e))


@router.message(InsertForm.gender)
async def process_gender(message: Message, state: FSMContext):
    gender = message.text.strip().capitalize()
    if gender not in ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"]:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª –∫–∞–∫ '–ú—É–∂—Å–∫–æ–π' –∏–ª–∏ '–ñ–µ–Ω—Å–∫–∏–π'")
        return
    await state.update_data(gender=gender)
    await message.answer("üóì –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.2000)")
    await state.set_state(InsertForm.birth_date)


@router.message(InsertForm.birth_date)
async def process_birth_date(message: Message, state: FSMContext):
    try:
        birth_date = datetime.strptime(message.text, "%d.%m.%Y").date()
        await state.update_data(birth_date=birth_date)
        await message.answer("üóì –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Å–º–µ—Ä—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –∂–∏–≤")
        await state.set_state(InsertForm.death_date)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.2000)")


@router.message(InsertForm.death_date)
async def process_death_date(message: Message, state: FSMContext):
    text = message.text.strip().lower()
    death_date = None
    if text != "–Ω–µ—Ç":
        try:
            death_date = datetime.strptime(text, "%d.%m.%Y").date()
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ '–Ω–µ—Ç', –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –∂–∏–≤")
            return
    await state.update_data(death_date=death_date)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫—É—é –±–∏–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ —á–µ–ª–æ–≤–µ–∫–µ. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ '–Ω–µ—Ç'")
    await state.set_state(InsertForm.bio)


@router.message(InsertForm.bio)
async def process_bio(message: Message, state: FSMContext):
    bio = message.text if message.text.lower() != "–Ω–µ—Ç" else None
    data = await state.get_data()
    fio_parts = data['fio'].split()
    last_name, first_name, father_name = fio_parts[0], fio_parts[1], fio_parts[2]
    try:
        async with async_session() as session:
            new_person = Persons(
                first_name=first_name,
                last_name=last_name,
                father_name=father_name,
                birth_date=data['birth_date'],
                death_date=data['death_date'],
                gender=data['gender'],
                bio=bio,
                photo_url=None
            )
            session.add(new_person)
            await session.commit()
            await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
    finally:
        await state.clear()