from aiogram import F, Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.models import  async_session, Relationship


router = Router()


class RelationForm(StatesGroup):
    parent = State()
    child = State()
    rel_type = State()


@router.message(F.text == '–°–æ–∑–¥–∞—Ç—å —Å–≤—è–∑–∏ —Ä–æ–¥–∏—Ç–µ–ª—å - —Ä–µ–±–µ–Ω–æ–∫')
async def insert_parent(message: Message, state: FSMContext):
    await message.answer(
        "üë™ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∏ '—Ä–æ–¥–∏—Ç–µ–ª—å - —Ä–µ–±–µ–Ω–æ–∫' —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–Ω–∞–µ—Ç–µ –Ω—É–∂–Ω—ã–µ ID. "
        "–ï—Å–ª–∏ ID –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π ¬´–ü–æ–∏—Å–∫¬ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID —Ä–æ–¥–∏—Ç–µ–ª—è:"
    )
    await state.set_state(RelationForm.parent)


@router.message(RelationForm.parent)
async def process_parent(message: Message, state: FSMContext):
    await state.update_data(parent=message.text)
    await message.answer("üë™ –í–≤–µ–¥–∏—Ç–µ ID —Ä–µ–±–µ–Ω–∫–∞:")
    await state.set_state(RelationForm.child)


@router.message(RelationForm.child)
async def process_child(message: Message, state: FSMContext):
    await state.update_data(child=message.text)
    await message.answer(
        "üìù –£–∫–∞–∂–∏—Ç–µ —Å—Ç–µ–ø–µ–Ω—å —Ä–æ–¥—Å—Ç–≤–∞. –í–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: '–†–æ–¥–Ω–æ–π', '–ü—Ä–∏–µ–º–Ω—ã–π', '–û—Ç—á–∏–º', '–ú–∞—á–µ—Ö–∞'"
    )
    await state.set_state(RelationForm.rel_type)


@router.message(RelationForm.rel_type)
async def process_type(message: Message, state: FSMContext):
    rel_type = message.text.strip().capitalize()
    if rel_type not in ['–†–æ–¥–Ω–æ–π', '–ü—Ä–∏–µ–º–Ω—ã–π', '–û—Ç—á–∏–º', '–ú–∞—á–µ—Ö–∞']:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Ä–æ–¥—Å—Ç–≤–∞: '–†–æ–¥–Ω–æ–π', '–ü—Ä–∏–µ–º–Ω—ã–π', '–û—Ç—á–∏–º', '–ú–∞—á–µ—Ö–∞'")
        return
    data = await state.get_data()
    try:
        async with async_session() as session:
            new_relationship = Relationship(
                parent_id=int(data['parent']),
                child_id=int(data['child']),
                relationship_type=rel_type
            )
            session.add(new_relationship)
            await session.commit()
            await message.answer("‚úÖ –°–≤—è–∑—å '—Ä–æ–¥–∏—Ç–µ–ª—å - —Ä–µ–±–µ–Ω–æ–∫' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, –≤–æ–∑–º–æ–∂–Ω–æ —É–∫–∞–∑–∞–Ω—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ ID. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        )
    finally:
        await state.clear()