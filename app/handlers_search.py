from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime
import paramiko
import os
from transliterate import translit
from aiogram import Bot

import config as cfg
from app.models import Persons, async_session
import app.keyboards as kb
import app.requests as req
from app.utils import valid_fio, send_person_info, edit_text_person_info


router = Router()
bot = Bot(token=cfg.TG_TOKEN)


class Form(StatesGroup):
    search = State()
    edit = State()
    edit_fio = State()
    edit_birth_date = State()
    edit_death_date = State()
    edit_gender = State()
    edit_bio = State()
    edit_photo = State()


@router.message(F.text == '–ü–æ–∏—Å–∫')
async def start_search(message: Message, state: FSMContext):
    await message.answer(
        "üîç –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏.\n"
        "–ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞."
    )
    await state.set_state(Form.search)


@router.message(Form.search)
async def process_fullname(message: Message, state: FSMContext):
    persons = await req.search_persons(message.text)
    if not persons:
        await message.answer(
            "üôÅ –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏–º–µ–Ω–∏/—Ñ–∞–º–∏–ª–∏–∏."
        )
        return
    for p in persons:
        full_info = (
            f"üÜî ID: {p.person_id}\n"
            f"üë§ {p.last_name} {p.first_name} {p.father_name}\n\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {p.birth_date}\n"
            f"üìÖ –î–∞—Ç–∞ —Å–º–µ—Ä—Ç–∏: {p.death_date if p.death_date else '–ù/–î'}\n"
            f"üë´ –ü–æ–ª: {p.gender}\n\n"
            f"üìã –ë–∏–æ–≥—Ä–∞—Ñ–∏—è:\n{p.bio if p.bio else '–ë–∏–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
            f"üñº –§–æ—Ç–æ: {p.photo_url}\n"
        )
        keyboard = kb.get_edit_keyboard(p.person_id)
        await message.answer(full_info, reply_markup=keyboard)
        await state.update_data(full_info=full_info, person_id=p.person_id)


@router.callback_query(Form.search, F.data.startswith('edit_person_'))
async def edit_person(callback: CallbackQuery, state: FSMContext):
    person_id = int(callback.data.split('_')[-1])
    await state.update_data(person_id=person_id)
    await edit_text_person_info(callback.message, person_id, kb.get_edit_fields_keyboard)


@router.callback_query(Form.search, F.data.startswith('back_edit_person_'))
async def back_to_edit(callback: CallbackQuery, state: FSMContext):
    person_id = int(callback.data.split('_')[-1])
    await state.update_data(person_id=person_id)
    await edit_text_person_info(callback.message, person_id, kb.get_edit_keyboard)



@router.callback_query(Form.search, F.data.startswith('edit_fio_'))
async def edit_fio(callback: CallbackQuery, state: FSMContext):
    person_id = int(callback.data.split('_')[-1])
    await state.update_data(person_id=person_id)
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ")
    await state.set_state(Form.edit_fio)
    await callback.answer()


@router.message(Form.edit_fio)
async def process_edit_fio(message: Message, state: FSMContext):
    data = await state.get_data()
    person_id = data['person_id']
    try:
        valid_fio(message.text)
        async with async_session() as session:
            person = await session.get(Persons, person_id)
            fio_parts = message.text.split()
            person.last_name = fio_parts[0]
            person.first_name = fio_parts[1]
            person.father_name = fio_parts[2]
            await session.commit()
        await message.answer("‚úÖ –§–ò–û —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        await send_person_info(message, person_id)
        await state.set_state(Form.search)
    except TypeError as e:
        await message.answer(str(e))


@router.callback_query(Form.search, F.data.startswith('edit_birth_date_'))
async def edit_birth_date(callback: CallbackQuery, state: FSMContext):
    person_id = int(callback.data.split('_')[-1])
    await state.update_data(person_id=person_id)
    await callback.message.answer("üóì –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.2000)")
    await state.set_state(Form.edit_birth_date)
    await callback.answer()


@router.message(Form.edit_birth_date)
async def process_edit_birth_date(message: Message, state: FSMContext):
    data = await state.get_data()
    person_id = data['person_id']
    try:
        birth_date = datetime.strptime(message.text, "%d.%m.%Y").date()
        async with async_session() as session:
            person = await session.get(Persons, person_id)
            person.birth_date = birth_date
            await session.commit()
        await message.answer("‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        await send_person_info(message, person_id)
        await state.set_state(Form.search)
    except ValueError:
        await message.answer(
            "‚ùå –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.2000)"
        )


@router.callback_query(Form.search, F.data.startswith('edit_death_date_'))
async def edit_death_date(callback: CallbackQuery, state: FSMContext):
    person_id = int(callback.data.split('_')[-1])
    await state.update_data(person_id=person_id)
    await callback.message.answer(
        "üóì –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É —Å–º–µ—Ä—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –∂–∏–≤"
    )
    await state.set_state(Form.edit_death_date)
    await callback.answer()


@router.message(Form.edit_death_date)
async def process_edit_death_date(message: Message, state: FSMContext):
    data = await state.get_data()
    person_id = data['person_id']
    text = message.text.strip().lower()
    death_date = None
    if text != "–Ω–µ—Ç":
        try:
            death_date = datetime.strptime(text, "%d.%m.%Y").date()
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'"
            )
            return
    async with async_session() as session:
        person = await session.get(Persons, person_id)
        person.death_date = death_date
        await session.commit()
    await message.answer("‚úÖ –î–∞—Ç–∞ —Å–º–µ—Ä—Ç–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    await send_person_info(message, person_id)
    await state.set_state(Form.search)


@router.callback_query(Form.search, F.data.startswith('edit_gender_'))
async def edit_gender(callback: CallbackQuery, state: FSMContext):
    person_id = int(callback.data.split('_')[-1])
    await state.update_data(person_id=person_id)
    await callback.message.answer("üë´ –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª: –ú—É–∂—Å–∫–æ–π –∏–ª–∏ –ñ–µ–Ω—Å–∫–∏–π")
    await state.set_state(Form.edit_gender)
    await callback.answer()


@router.message(Form.edit_gender)
async def process_edit_gender(message: Message, state: FSMContext):
    data = await state.get_data()
    person_id = data['person_id']
    gender = message.text.strip().capitalize()
    if gender not in ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"]:
        await message.answer(
            "‚ùå –ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ: –ú—É–∂—Å–∫–æ–π –∏–ª–∏ –ñ–µ–Ω—Å–∫–∏–π"
        )
        return
    async with async_session() as session:
        person = await session.get(Persons, person_id)
        person.gender = gender
        await session.commit()
    await message.answer("‚úÖ –ü–æ–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    await send_person_info(message, person_id)
    await state.set_state(Form.search)


@router.callback_query(Form.search, F.data.startswith('edit_bio_'))
async def edit_bio(callback: CallbackQuery, state: FSMContext):
    person_id = int(callback.data.split('_')[-1])
    await state.update_data(person_id=person_id)
    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –±–∏–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ —á–µ–ª–æ–≤–µ–∫–µ")
    await state.set_state(Form.edit_bio)
    await callback.answer()


@router.message(Form.edit_bio)
async def process_edit_bio(message: Message, state: FSMContext):
    data = await state.get_data()
    person_id = data['person_id']
    bio = message.text.strip()
    async with async_session() as session:
        person = await session.get(Persons, person_id)
        person.bio = bio
        await session.commit()
    await message.answer("‚úÖ –ë–∏–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    await send_person_info(message, person_id)
    await state.set_state(Form.search)


@router.callback_query(Form.search, F.data.startswith('edit_photo_'))
async def edit_photo(callback: CallbackQuery, state: FSMContext):
    person_id = int(callback.data.split('_')[-1])
    await state.update_data(person_id=person_id)
    await callback.message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–ª–æ–≤–µ–∫–∞. –õ—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥–æ–π–¥–µ—Ç –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–µ —Ñ–æ—Ç–æ."
    )
    await state.set_state(Form.edit_photo)
    await callback.answer()


@router.message(Form.edit_photo, ~F.photo)
async def handle_wrong_photo_format(message: Message):
    await message.answer(
        "‚ùå –ù–µ –≤–∏–∂—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–Ω–µ —Ñ–∞–π–ª –∏ –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç)"
    )


@router.message(Form.edit_photo, F.photo)
async def process_edit_photo(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    person_id = data['person_id']
    try:
        async with async_session() as session:
            person = await session.get(Persons, person_id)
            first_name_lat = translit(person.first_name, 'ru', reversed=True).lower().replace("'", "")
            last_name_lat = translit(person.last_name, 'ru', reversed=True).lower().replace("'", "")
            father_name_lat = translit(person.father_name, 'ru', reversed=True).lower().replace("'", "")

            filename = f"{first_name_lat}_{last_name_lat}_{father_name_lat}.jpg"
            local_path = f"temp_{filename}"

            photo = message.photo[-1]
            file = await bot.get_file(photo.file_id)
            await bot.download_file(file.file_path, local_path)

            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            ssh.connect(cfg.SSH_HOST, cfg.SSH_PORT, cfg.SSH_USERNAME, cfg.SSH_PASSWORD)

            sftp = ssh.open_sftp()
            sftp.put(local_path, os.path.join(cfg.REMOTE_PATH, filename))
            sftp.close()
            ssh.close()

            person.photo_url = f"{cfg.BASE_URL}{filename}"
            await session.commit()

            await message.answer("‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            await send_person_info(message, person_id)

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        if os.path.exists(local_path):
            os.remove(local_path)
    await state.set_state(Form.search)